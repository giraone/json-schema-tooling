/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0-beta).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.giraone.jsonschema.api.v1;

import java.util.List;
import com.giraone.jsonschema.models.v1.PatchEntry;
import com.giraone.jsonschema.models.v1.PersonBase;
import com.giraone.jsonschema.models.v1.PersonFull;
import com.giraone.jsonschema.models.v1.Problem;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-08-15T10:15:19.103680200+02:00[Europe/Berlin]")
@Validated
@Api(value = "Person", description = "the Person API")
public interface PersonApi {

    /**
     * DELETE /persons/{id} : Delete a single person based on the ID supplied.
     *
     * @param id The UUID of the person to fetch. (required)
     * @return Person was deleted. (status code 204)
     *         or Person with given id not found. (status code 404)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Delete a single person based on the ID supplied.", nickname = "deleteById", notes = "", tags={ "Person", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Person was deleted."),
        @ApiResponse(code = 404, message = "Person with given id not found."),
        @ApiResponse(code = 500, message = "unexpected error", response = Problem.class) })
    @RequestMapping(value = "/persons/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteById(@ApiParam(value = "The UUID of the person to fetch.",required=true) @PathVariable("id") UUID id);


    /**
     * GET /persons : Return all persons of the repository.
     *
     * @param limit Optional limit for the number of returned persons. (optional)
     * @return A list of persons. (status code 200)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Return all persons of the repository.", nickname = "getAll", notes = "", response = PersonFull.class, responseContainer = "List", tags={ "Person", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of persons.", response = PersonFull.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "unexpected error", response = Problem.class) })
    @RequestMapping(value = "/persons",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PersonFull>> getAll(@ApiParam(value = "Optional limit for the number of returned persons.") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    /**
     * GET /persons/{id} : Returns a person from the repository based on a given ID.
     *
     * @param id The UUID of the person to fetch. (required)
     * @return a person, if one was found for the given id. (status code 200)
     *         or person with given id not found (status code 404)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Returns a person from the repository based on a given ID.", nickname = "getOneById", notes = "", response = PersonFull.class, tags={ "Person", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "a person, if one was found for the given id.", response = PersonFull.class),
        @ApiResponse(code = 404, message = "person with given id not found"),
        @ApiResponse(code = 500, message = "unexpected error", response = Problem.class) })
    @RequestMapping(value = "/persons/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PersonFull> getOneById(@ApiParam(value = "The UUID of the person to fetch.",required=true) @PathVariable("id") UUID id);


    /**
     * POST /persons : Insert a new person to the repository. If no id is given it will be generated.
     *
     * @param personBase Insert a new person to the repository. (required)
     * @return The added person extended by some calculated values. (status code 200)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Insert a new person to the repository. If no id is given it will be generated.", nickname = "insertNew", notes = "", response = PersonFull.class, tags={ "Person", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The added person extended by some calculated values.", response = PersonFull.class),
        @ApiResponse(code = 500, message = "unexpected error", response = Problem.class) })
    @RequestMapping(value = "/persons",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PersonFull> insertNew(@ApiParam(value = "Insert a new person to the repository." ,required=true )  @Valid @RequestBody PersonBase personBase);


    /**
     * PUT /persons/{id} : Update an existing person in the repository by fully overwriting the data.
     *
     * @param id The UUID of the person to fetch. (required)
     * @param personBase The person data used for the update. (required)
     * @return The updated person extended by some calculated values. (status code 200)
     *         or person with given id not found (status code 404)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Update an existing person in the repository by fully overwriting the data.", nickname = "updateExisting", notes = "", response = PersonFull.class, tags={ "Person", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated person extended by some calculated values.", response = PersonFull.class),
        @ApiResponse(code = 404, message = "person with given id not found"),
        @ApiResponse(code = 500, message = "unexpected error", response = Problem.class) })
    @RequestMapping(value = "/persons/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<PersonFull> updateExisting(@ApiParam(value = "The UUID of the person to fetch.",required=true) @PathVariable("id") UUID id,@ApiParam(value = "The person data used for the update." ,required=true )  @Valid @RequestBody PersonBase personBase);


    /**
     * PATCH /persons/{id} : Update an existing person in the repository using selective patch operations.
     *
     * @param id The UUID of the person to fetch. (required)
     * @param patchEntry Update an existing person in the repository. (required)
     * @return The updated person extended by some calculated values. (status code 200)
     *         or person with given id not found (status code 404)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Update an existing person in the repository using selective patch operations.", nickname = "updateSelective", notes = "", response = PersonFull.class, tags={ "Person", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated person extended by some calculated values.", response = PersonFull.class),
        @ApiResponse(code = 404, message = "person with given id not found"),
        @ApiResponse(code = 500, message = "unexpected error", response = Problem.class) })
    @RequestMapping(value = "/persons/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json-patch+json" },
        method = RequestMethod.PATCH)
    ResponseEntity<PersonFull> updateSelective(@ApiParam(value = "The UUID of the person to fetch.",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Update an existing person in the repository." ,required=true )  @Valid @RequestBody List<PatchEntry> patchEntry);

}
